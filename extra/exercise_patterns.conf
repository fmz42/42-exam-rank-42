# Configuración de ejercicios por patrón conceptual
# Cada línea: ejercicio:nivel_original:dificultad_patrón:descripción

# Patrón 1: Manipulación básica de caracteres
ft_putstr:1:1:Función básica para escribir strings
ft_swap:1:1:Intercambiar el valor de dos variables
rot_13:1:2:Reemplazar cada letra por la que está 13 posiciones adelante
rotone:1:2:Reemplazar cada letra por la siguiente en el alfabeto
ulstr:1:2:Invertir el caso de las letras (mayúsculas a minúsculas y viceversa)
alpha_mirror:2:3:Reemplazar cada letra por su "espejo" alfabético
print_bits:2:3:Mostrar la representación binaria de un byte
reverse_bits:2:3:Invertir los bits de un byte
swap_bits:2:3:Intercambiar las mitades de un byte
is_power_of_2:2:3:Determinar si un número es potencia de 2

# Patrón 2: Procesamiento de cadenas palabra por palabra  
first_word:1:1:Muestra la primera palabra de una cadena
repeat_alpha:1:2:Repite cada carácter alfabético según su posición
rev_print:1:1:Imprime una cadena al revés
search_and_replace:1:2:Reemplaza todas las ocurrencias de un carácter por otro
last_word:2:2:Muestra la última palabra de una cadena
camel_to_snake:2:3:Convierte de camelCase a snake_case
snake_to_camel:2:3:Convierte de snake_case a camelCase
epur_str:3:4:Elimina espacios múltiples y al inicio/final
expand_str:3:4:Elimina espacios múltiples y al inicio/final (variante)
str_capitalizer:3:4:Capitaliza la primera letra de cada palabra
rstr_capitalizer:3:4:Capitaliza la última letra de cada palabra
rostring:4:5:Rota las palabras de una cadena, moviendo la primera al final
rev_wstr:4:5:Imprime las palabras de una cadena en orden inverso

# Patrón 3: Funciones de conversión de tipos
ft_strlen:1:1:Calcula la longitud de una cadena
ft_strcpy:1:1:Copia una cadena en otra
ft_atoi:2:3:Convierte una cadena a entero
do_op:2:3:Realiza operaciones aritméticas básicas en strings
print_hex:3:3:Convierte un número decimal a hexadecimal
ft_strdup:2:4:Duplica una cadena asignando memoria
ft_atoi_base:3:4:Convierte una cadena a entero en una base específica
ft_range:3:4:Crea arrays de enteros con valores consecutivos
ft_rrange:3:4:Crea arrays de enteros con valores consecutivos (reverso)
ft_itoa:4:5:Convierte un entero a cadena
ft_split:4:5:Divide una cadena en palabras

# Patrón 4: Algoritmos de búsqueda
ft_strcspn:2:2:Busca la primera ocurrencia de caracteres
ft_strspn:2:2:Busca la última ocurrencia de caracteres
ft_strpbrk:2:2:Encuentra la primera ocurrencia de cualquier carácter
wdmatch:2:3:Determina si una cadena está "oculta" en otra
max:2:2:Encuentra el valor máximo en un array
hidenp:3:4:Determina si una cadena está "escondida" en otra
paramsum:3:2:Cuenta el número de argumentos pasados al programa
tab_mult:3:3:Muestra la tabla de multiplicar de un número

# Patrón 5: Operaciones con conjuntos
union:2:3:Muestra los caracteres que aparecen en alguna de dos cadenas
inter:2:3:Muestra los caracteres que aparecen en ambas cadenas

# Patrón 6: Manipulación de memoria y punteros
ft_strdup:2:3:Duplica una cadena asignando memoria dinámicamente
ft_strrev:2:2:Invierte una cadena in-place
ft_range:3:4:Crea arrays de enteros con valores consecutivos
ft_rrange:3:4:Crea arrays de enteros con valores consecutivos (reverso)
ft_split:4:5:Divide una cadena en un array de palabras

# Patrón 7: Algoritmos matemáticos
add_prime_sum:3:4:Suma de números primos
lcm:3:4:Encuentra el mínimo común múltiplo
pgcd:3:4:Encuentra el máximo común divisor
fprime:4:5:Muestra los factores primos de un número

# Patrón 8: Manipulación de listas enlazadas
ft_list_size:3:3:Cuenta el número de elementos en una lista
ft_list_foreach:4:4:Aplica una función a cada elemento de una lista
ft_list_remove_if:4:5:Elimina elementos específicos de una lista
sort_list:4:5:Ordena una lista enlazada

# Patrón 9: Algoritmos de ordenación
sort_int_tab:4:4:Ordena un array de enteros
sort_list:4:5:Ordena una lista enlazada

# Patrón 10: Recursividad y algoritmos de inundación
flood_fill:4:5:Implementa el algoritmo de inundación para rellenar áreas

# Patrón 11: Operaciones Bitwise (Manipulación a nivel de bits)
print_bits:2:3:Mostrar la representación binaria de un byte
reverse_bits:2:3:Invertir el orden de bits en un byte
swap_bits:2:3:Intercambiar las mitades de un byte
is_power_of_2:2:3:Determinar si un número es potencia de 2

# Patrón 12: Uso de Flags (Banderas de estado)
# Nota: Estos ejercicios pueden resolverse usando técnicas de flags
# aunque originalmente no estén diseñados específicamente para eso
wdmatch:2:3:Usar flags para rastrear caracteres encontrados
union:2:3:Usar flags para evitar caracteres duplicados
inter:2:3:Usar flags para encontrar intersección de conjuntos
hidenp:3:4:Usar flags para rastrear secuencia de caracteres
paramsum:3:2:Usar flags para validar argumentos
str_capitalizer:3:4:Usar flags para rastrear estado de palabras
