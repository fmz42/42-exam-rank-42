Assignment name  : vect2
Expected files   : *.cpp *.hpp
Allowed functions: All C++ standard functions
--------------------------------------------------------------------------------

Write a class called 'vect2' that represents a mathematical 2D vector using std::vector<int>.

Your vect2 class must:

1. Have a private member: std::vector<int> _container that stores exactly 2 integers (x, y components)

2. Implement the following constructors:
   - vect2();                        // default constructor (0, 0)
   - vect2(int v1, int v2);         // constructor with two values
   - vect2(const vect2& original);  // copy constructor

3. Implement a destructor:
   - ~vect2();

4. Implement getter function:
   - int getContainer_elements(int index) const;  // returns element at index (0 or 1)

5. Implement the following operators:
   - operator+ for vector addition
   - operator- for vector subtraction
   - operator* for scalar multiplication (vect2 * int)
   - operator= for assignment
   - operator<< for output stream (format: "(x, y)")

6. Mathematical operations:
   - Addition: (x1, y1) + (x2, y2) = (x1+x2, y1+y2)
   - Subtraction: (x1, y1) - (x2, y2) = (x1-x2, y1-y2)
   - Scalar multiplication: (x, y) * k = (x*k, y*k)

Requirements:
- The vector must always contain exactly 2 elements
- Handle index bounds checking in getter function
- Implement proper copy semantics
- All arithmetic operations should return new vect2 objects

Example usage:
vect2 v1(3, 4);
vect2 v2(1, 2);
vect2 v3 = v1 + v2;  // Result: (4, 6)
vect2 v4 = v1 * 2;   // Result: (6, 8)
std::cout << v3 << std::endl;  // Output: (4, 6)

Your implementation should handle:
- Proper initialization of the vector container
- Bounds checking for element access
- Correct operator overloading semantics
- Clean memory management