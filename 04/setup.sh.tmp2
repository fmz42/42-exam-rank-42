#!/bin/bash

# Colores
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'
YELLOW='\033[1;33m'

# Directorios
EXAM_DIR="$(cd "$(dirname "$0")" && pwd)"
MICROSHELL_DIR="$EXAM_DIR/microshell"
GRADEME_DIR="$MICROSHELL_DIR/grademe"

# Crear directorios necesarios
mkdir -p "$GRADEME_DIR"
mkdir -p "$EXAM_DIR/rendu/microshell"

echo -e "${BLUE}Configurando permisos...${NC}"

# Dar permisos de ejecución
chmod +x "$EXAM_DIR/exam.sh"
chmod +x "$MICROSHELL_DIR/microshell_guide" 2>/dev/null || echo -e "${YELLOW}Advertencia: microshell_guide no encontrado${NC}"
chmod +x "$GRADEME_DIR/test.sh" 2>/dev/null || echo -e "${YELLOW}Advertencia: test.sh no encontrado${NC}"
chmod +x "$GRADEME_DIR/grademe.sh" 2>/dev/null || echo -e "${YELLOW}Advertencia: grademe.sh no encontrado${NC}"

# Compilar guía si no existe
if [ ! -x "$MICROSHELL_DIR/microshell_guide" ]; then
    echo -e "${YELLOW}Compilando guía interactiva...${NC}"
    gcc -Wall -Wextra -Werror "$MICROSHELL_DIR/microshell_guide.c" "$MICROSHELL_DIR/guide_utils.c" -o "$MICROSHELL_DIR/microshell_guide" 2>/dev/null
    if [ $? -eq 0 ]; then
        chmod +x "$MICROSHELL_DIR/microshell_guide"
        echo -e "${GREEN}Guía compilada correctamente${NC}"
    else
        echo -e "${RED}Error al compilar la guía${NC}"
    fi
fi

# Crear test.sh si no existe
if [ ! -f "$GRADEME_DIR/test.sh" ]; then
    echo -e "${YELLOW}Creando test.sh...${NC}"
    cat > "$GRADEME_DIR/test.sh" << 'EOL'
#!/bin/bash

MICROSHELL="./microshell"
COLOR_RED="\033[0;31m"
COLOR_GREEN="\033[0;32m"
COLOR_YELLOW="\033[0;33m"
COLOR_RESET="\033[0m"

echo -e "${COLOR_YELLOW}=== Pruebas básicas ===${COLOR_RESET}"

# Prueba 1: Comando simple
echo -e "\n${COLOR_YELLOW}Prueba 1: Comando simple${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls"
$MICROSHELL /bin/ls
if [ $? -eq 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 1 pasada${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 1 fallida${COLOR_RESET}"
fi

# Prueba 2: Comando con argumentos
echo -e "\n${COLOR_YELLOW}Prueba 2: Comando con argumentos${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls -la"
$MICROSHELL /bin/ls -la
if [ $? -eq 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 2 pasada${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 2 fallida${COLOR_RESET}"
fi

# Prueba 3: Comando inexistente
echo -e "\n${COLOR_YELLOW}Prueba 3: Comando inexistente${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /comando_inexistente"
$MICROSHELL /comando_inexistente
if [ $? -ne 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 3 pasada (el comando fallido devuelve código diferente a 0)${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 3 fallida (el comando fallido debería devolver código diferente a 0)${COLOR_RESET}"
fi

echo -e "\n${COLOR_YELLOW}=== Pruebas de cd ===${COLOR_RESET}"

# Prueba 4: cd básico
echo -e "\n${COLOR_YELLOW}Prueba 4: cd básico${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL cd .. ';' /bin/pwd"
CURRENT_DIR=$(pwd)
$MICROSHELL cd .. ";" /bin/pwd
if [ "$(pwd)" = "$CURRENT_DIR" ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 4 pasada (cd no afecta al proceso padre)${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 4 fallida (cd afectó al proceso padre)${COLOR_RESET}"
    cd "$CURRENT_DIR"
fi

# Prueba 5: cd con error
echo -e "\n${COLOR_YELLOW}Prueba 5: cd con error${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL cd /directorio_inexistente"
$MICROSHELL cd /directorio_inexistente
if [ $? -ne 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 5 pasada (cd a directorio inexistente devuelve error)${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 5 fallida (cd a directorio inexistente debería devolver error)${COLOR_RESET}"
fi

echo -e "\n${COLOR_YELLOW}=== Pruebas de pipes ===${COLOR_RESET}"

# Prueba 6: Pipe simple
echo -e "\n${COLOR_YELLOW}Prueba 6: Pipe simple${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls '|' /bin/grep microshell"
$MICROSHELL /bin/ls "|" /bin/grep microshell
if [ $? -eq 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 6 pasada${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 6 fallida${COLOR_RESET}"
fi

# Prueba 7: Múltiples pipes
echo -e "\n${COLOR_YELLOW}Prueba 7: Múltiples pipes${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls '|' /bin/grep microshell '|' /usr/bin/wc -l"
$MICROSHELL /bin/ls "|" /bin/grep microshell "|" /usr/bin/wc -l
if [ $? -eq 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 7 pasada${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 7 fallida${COLOR_RESET}"
fi

echo -e "\n${COLOR_YELLOW}=== Pruebas de punto y coma ===${COLOR_RESET}"

# Prueba 8: Comandos separados por ;
echo -e "\n${COLOR_YELLOW}Prueba 8: Comandos separados por ;${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls ';' /bin/echo 'Prueba de punto y coma'"
$MICROSHELL /bin/ls ";" /bin/echo "Prueba de punto y coma"
if [ $? -eq 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 8 pasada${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 8 fallida${COLOR_RESET}"
fi

echo -e "\n${COLOR_YELLOW}=== Pruebas complejas ===${COLOR_RESET}"

# Prueba 9: Combinación de pipes y punto y coma
echo -e "\n${COLOR_YELLOW}Prueba 9: Combinación de pipes y punto y coma${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls '|' /bin/grep microshell ';' /bin/echo 'Prueba compleja'"
$MICROSHELL /bin/ls "|" /bin/grep microshell ";" /bin/echo "Prueba compleja"
if [ $? -eq 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 9 pasada${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 9 fallida${COLOR_RESET}"
fi

# Prueba 10: Caso de error en pipe
echo -e "\n${COLOR_YELLOW}Prueba 10: Caso de error en pipe${COLOR_RESET}"
echo -e "Ejecutando: $MICROSHELL /bin/ls '|' /comando_inexistente"
$MICROSHELL /bin/ls "|" /comando_inexistente
if [ $? -ne 0 ]; then
    echo -e "${COLOR_GREEN}✓ Prueba 10 pasada (error en comando de pipe devuelve error)${COLOR_RESET}"
else
    echo -e "${COLOR_RED}✗ Prueba 10 fallida (error en comando de pipe debería devolver error)${COLOR_RESET}"
fi

echo -e "\n${COLOR_YELLOW}Todas las pruebas completadas.${COLOR_RESET}"
EOL
    chmod +x "$GRADEME_DIR/test.sh"
    echo -e "${GREEN}test.sh creado correctamente${NC}"
fi

# Crear grademe.sh si no existe
if [ ! -f "$GRADEME_DIR/grademe.sh" ]; then
    echo -e "${YELLOW}Creando grademe.sh...${NC}"
    cat > "$GRADEME_DIR/grademe.sh" << 'EOL'
#!/bin/bash

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
RESET='\033[0m'
BOLD='\033[1m'

# Funciones 
parse_test_output() {
    local output="$1"
    local passed=$(echo "$output" | grep -c "✓")
    local failed=$(echo "$output" | grep -c "✗")
    local total=$(($passed + $failed))
    
    echo "$passed $failed $total"
}

# Verificamos que tengamos microshell
if [ ! -f "microshell" ]; then
    echo -e "${RED}Error: No se encuentra el ejecutable microshell${RESET}"
    echo -e "${YELLOW}Compilando...${RESET}"
    gcc -Wall -Wextra -Werror microshell.c -o microshell
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error de compilación.${RESET}"
        exit 1
    fi
fi

# Ejecutar las pruebas y capturar salida
echo -e "${BLUE}${BOLD}Ejecutando pruebas...${RESET}"
OUTPUT=$(./test.sh 2>&1)

# Análisis de resultados
RESULTS=$(parse_test_output "$OUTPUT")
PASSED=$(echo $RESULTS | cut -d' ' -f1)
FAILED=$(echo $RESULTS | cut -d' ' -f2)
TOTAL=$(echo $RESULTS | cut -d' ' -f3)

# Mostrar resultados
echo -e "${BLUE}${BOLD}===============================${RESET}"
echo -e "${BLUE}${BOLD}       RESULTADOS FINALES      ${RESET}"
echo -e "${BLUE}${BOLD}===============================${RESET}"
echo -e "${GREEN}Pruebas pasadas: ${PASSED}/${TOTAL}${RESET}"
echo -e "${RED}Pruebas fallidas: ${FAILED}/${TOTAL}${RESET}"

# Calcular nota aproximada (cada prueba vale 10 puntos)
SCORE=$((PASSED * 100 / TOTAL))
echo -e "${YELLOW}${BOLD}Nota aproximada: ${SCORE}/100${RESET}"

if [ $SCORE -eq 100 ]; then
    echo -e "${GREEN}${BOLD}¡PERFECTO! Tu implementación pasa todas las pruebas.${RESET}"
elif [ $SCORE -ge 80 ]; then
    echo -e "${GREEN}¡Bien hecho! Tu implementación funciona correctamente en la mayoría de los casos.${RESET}"
elif [ $SCORE -ge 50 ]; then
    echo -e "${YELLOW}Tu implementación funciona parcialmente. Revisa los casos que fallan.${RESET}"
else
    echo -e "${RED}Tu implementación necesita más trabajo. Revisa los requisitos del ejercicio.${RESET}"
fi

exit 0
EOL
    chmod +x "$GRADEME_DIR/grademe.sh"
    echo -e "${GREEN}grademe.sh creado correctamente${NC}"
fi

echo -e "${GREEN}Configuración completada. Ahora puedes ejecutar ./exam.sh${NC}"
